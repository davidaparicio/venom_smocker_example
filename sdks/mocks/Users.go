// Code generated by mockery v2.14.0. DO NOT EDIT.

//go:build !codeanalysis
// +build !codeanalysis

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "example/types"
)

// Users is an autogenerated mock type for the Users type
type Users struct {
	mock.Mock
}

// GetUserByName provides a mock function with given fields: ctx, name
func (_m *Users) GetUserByName(ctx context.Context, name string) (types.User, error) {
	ret := _m.Called(ctx, name)

	var r0 types.User
	if rf, ok := ret.Get(0).(func(context.Context, string) types.User); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(types.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *Users) GetUsers(ctx context.Context) ([]types.User, error) {
	ret := _m.Called(ctx)

	var r0 []types.User
	if rf, ok := ret.Get(0).(func(context.Context) []types.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsers interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsers creates a new instance of Users. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsers(t mockConstructorTestingTNewUsers) *Users {
	mock := &Users{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
